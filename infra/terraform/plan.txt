
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_policy.codebuild_policy will be created
  + resource "aws_iam_policy" "codebuild_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "intent-ops-codebuild-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_policy.codepipeline_policy will be created
  + resource "aws_iam_policy" "codepipeline_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "intent-ops-codepipeline-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_policy.sagemaker_policy will be created
  + resource "aws_iam_policy" "sagemaker_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "intent-ops-sagemaker-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_role.codebuild_role will be created
  + resource "aws_iam_role" "codebuild_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "intent-ops-codebuild-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all              = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.codepipeline_role will be created
  + resource "aws_iam_role" "codepipeline_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "intent-ops-codepipeline-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all              = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.sagemaker_execution will be created
  + resource "aws_iam_role" "sagemaker_execution" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "sagemaker.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "intent-ops-sagemaker-exec-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all              = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.attach_cb will be created
  + resource "aws_iam_role_policy_attachment" "attach_cb" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "intent-ops-codebuild-role"
    }

  # aws_iam_role_policy_attachment.attach_cp will be created
  + resource "aws_iam_role_policy_attachment" "attach_cp" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "intent-ops-codepipeline-role"
    }

  # aws_iam_role_policy_attachment.attach_sm will be created
  + resource "aws_iam_role_policy_attachment" "attach_sm" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "intent-ops-sagemaker-exec-role"
    }

  # aws_s3_bucket.artifacts will be created
  + resource "aws_s3_bucket" "artifacts" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "intent-ops-artifacts-161242379734-us-east-1"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all                    = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket.capture will be created
  + resource "aws_s3_bucket" "capture" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "intent-ops-capture-161242379734-us-east-1"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all                    = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket.raw will be created
  + resource "aws_s3_bucket" "raw" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "intent-ops-raw-161242379734-us-east-1"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + tags_all                    = {
          + "Environment" = "staging"
          + "Owner"       = "lok"
          + "Project"     = "intent-ops"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_public_access_block.artifacts_block will be created
  + resource "aws_s3_bucket_public_access_block" "artifacts_block" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_public_access_block.capture_block will be created
  + resource "aws_s3_bucket_public_access_block" "capture_block" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_public_access_block.raw_block will be created
  + resource "aws_s3_bucket_public_access_block" "raw_block" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_server_side_encryption_configuration.artifacts_sse will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "artifacts_sse" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # aws_s3_bucket_server_side_encryption_configuration.capture_sse will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "capture_sse" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # aws_s3_bucket_server_side_encryption_configuration.raw_sse will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "raw_sse" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # aws_s3_bucket_versioning.artifacts_versioning will be created
  + resource "aws_s3_bucket_versioning" "artifacts_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_s3_bucket_versioning.capture_versioning will be created
  + resource "aws_s3_bucket_versioning" "capture_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_s3_bucket_versioning.raw_versioning will be created
  + resource "aws_s3_bucket_versioning" "raw_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

Plan: 21 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + bucket_artifacts             = "intent-ops-artifacts-161242379734-us-east-1"
  + bucket_capture               = "intent-ops-capture-161242379734-us-east-1"
  + bucket_raw                   = "intent-ops-raw-161242379734-us-east-1"
  + codebuild_role_arn           = (known after apply)
  + codepipeline_role_arn        = (known after apply)
  + sagemaker_execution_role_arn = (known after apply)
